Section 5: Validating the Rest Api Responses
Had to use <testng.version>6.14.3</testng.version> as latest 7.7.0 was failing for 55 vs 52 dependency issue log
push: first commit
--------------------------------------------------------------------------------
Section 6: Diving In depth Automating Rest APIs
parsing and validating mocked complex json response
--------------------------------------------------------------------------------
Section 7: Handling static, dynamic, files payload & using DataProvider
-------------------------------------------------------------------------------
Section 8: Updated with jiraapi testing package
Install Jira software(not cloud)
Installed but not launched;  issue resolved by https://www.youtube.com/watch?v=M-2_LqJuAS4&t=301s
Note: to start jira; start from bin directory
http://localhost:8080/secure/WelcomeToJIRA.jspa
https://developer.atlassian.com/cloud/jira/platform/jira-rest-api-cookie-based-authentication/#:~:text=In%20this%20tutorial%2C%20we%20will%20use%20cookie-based%20%28session%29,information%20about%20the%20session%20including%20the%20session%20cookie.
---------------------------------------------------------------------------------
Section 11-13: POJO Serialization/Deserialization and Spec Builders
Note: You have to manually generate code in web browser to get access-token to pass the execution. See details in Class
----------------------------------------------------------------------------------
Section 21: Added datadriving package for excel and hashmap usage
You can use this in DynamicJson.java class to drive your DataProvider tests from excel, and not hardcoded
Also added reusable HashMap code as this can be fed as body to restassured, same as POJO
--------------------------------------------------------------------------------------------------
Testng: Configured and added extentreport and testng.xml handling
Added extentreports to pom, Created reportutils package with added ExtentReporterNG and Listeners class
Added xml to maven surefire plugin to generate extent report.
Note:  running isolated test, e.g mvn -Dtest=RestTest test (will not generate extent report)
Extent report is only generated for mvn test (as it uses the testng.xml in the pom)
Profiling: Creating different profiles in pom.xml to allow running specific testng file as required
Note: With profiling used in pom, mvn test will not run tests in xml file anymore, the xml file name to run has to be given
mvn test -PRegression
mvn test -PSmoke
